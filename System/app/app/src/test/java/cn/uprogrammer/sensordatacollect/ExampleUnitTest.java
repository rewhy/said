package cn.uprogrammer.sensordatacollect;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import cn.uprogrammer.sensordatacollect.readFile.parseData;
import rfPrediction.SensorCalibration;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {

    @Test
    public void TEST() throws FileNotFoundException {
        System.out.println("Hello World in Ubuntu!");
        System.out.println(System.getProperty("user.dir"));


//        InputStream inputStream = null;
//        InputStreamReader isr = null;
        BufferedReader br = null;
        StringBuffer sb = new StringBuffer();
        File directory = new File("abc");
        directory.getPath();
        List gpsData = new ArrayList();



//            inputStream = assetManager.open(filename);
        File f = new File("1576229139445_gps.log");

//            isr = new InputStreamReader(inputStream);
//            br = new BufferedReader(isr);
        br = new BufferedReader(new FileReader(f));

        try {
            sb.append(br.readLine());
            String line = null;
            while ((line = br.readLine()) != null) {
                sb.append("\n" + line);
                String [] temp1 = line.split(" ");
                String [] temp2 = temp1[0].split("@");
                String [] temp3 = temp2[1].split("]");
                String timeStamp = temp3[0];
                String speed = temp1[6].split("=")[1];
                double [] t = new double [2];
                t[0] = Double.valueOf(speed);
                t[1] = Long.valueOf(timeStamp);
                gpsData.add(t);
                System.out.printf("time: %s, speed: %s \n", timeStamp, speed);
            }
            br.close();


        } catch (IOException e) {
            e.printStackTrace();
        }


//            isr.close();
//


        double[] a1 = {1, 2, 3, -1, -2, -3};

        double[][] a = {{0.64523699999999994947, -0.53869500000000003492, 9.39963499999999996248, -0.97738400000000003054, 0.12217300000000000382, -0.31415900000000002157,},
                {0.70628899999999994463, -0.56862199999999996081, 9.49061500000000002331, -1.44862299999999999400, 0.08726599999999999635, -0.41887900000000000134,},
                {0.67516399999999998638, -0.54468000000000005301, 9.48822099999999934994, -1.01228999999999991211, 0.01745299999999999976, -0.26179900000000000393,},
                {0.70150100000000004119, -0.57221400000000000041, 9.58877700000000032787, -1.01228999999999991211, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67516399999999998638, -0.63446299999999999919, 9.56483500000000042007, -0.99483699999999997132, 0.03490599999999999953, -0.26179900000000000393,},
                {0.70509200000000005204, -0.55784800000000001052, 9.54448499999999988574, -0.99483699999999997132, 0.01745299999999999976, -0.27925200000000000022,},
                {0.62967499999999998472, -0.49799300000000001898, 9.47625000000000028422, -0.94247700000000000919, 0.01745299999999999976, -0.27925200000000000022,},
                {0.73501899999999997792, -0.55545400000000000329, 9.48582700000000045293, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.74459600000000003561, -0.54468000000000005301, 9.51455699999999993111, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.65481400000000000716, -0.52313299999999995915, 9.45470199999999927343, -0.99483699999999997132, 0.03490599999999999953, -0.26179900000000000393,},
                {0.65122199999999996756, -0.55784800000000001052, 9.60673399999999944043, -0.99483699999999997132, 0.01745299999999999976, -0.26179900000000000393,},
                {0.78529800000000005156, -0.56742499999999995719, 9.51575399999999937961, -0.99483699999999997132, 0.01745299999999999976, -0.27925200000000000022,},
                {0.66917899999999996830, -0.51355600000000001248, 9.50497999999999976239, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.68952999999999997627, -0.56622799999999995357, 9.56124400000000029820, -0.95993099999999997873, 0.03490599999999999953, -0.26179900000000000393,},
                {0.70030300000000000882, -0.50756999999999996565, 9.48582700000000045293, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.66798199999999996468, -0.46806599999999998207, 9.44991399999999970305, -0.95993099999999997873, 0.00000000000000000000, -0.26179900000000000393,},
                {0.70748599999999994825, -0.54468000000000005301, 9.56363799999999919521, -0.99483699999999997132, 0.01745299999999999976, -0.27925200000000000022,},
                {0.70987999999999995548, -0.53749800000000003131, 9.54807600000000000762, -1.01228999999999991211, 0.01745299999999999976, -0.27925200000000000022,},
                {0.68354400000000004045, -0.57221400000000000041, 9.47026400000000023738, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.74100500000000002476, -0.51355600000000001248, 9.50976900000000036073, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.72903399999999995984, -0.51595000000000001972, 9.46786999999999956401, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.63326599999999999557, -0.50158499999999994756, 9.55765300000000017633, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.71347199999999999509, -0.53749800000000003131, 9.53969599999999928741, -0.99483699999999997132, 0.01745299999999999976, -0.27925200000000000022,},
                {0.64284300000000005326, -0.55665100000000000691, 9.47146099999999968588, -0.99483699999999997132, 0.00000000000000000000, -0.26179900000000000393,},
                {0.72424599999999994537, -0.51595000000000001972, 9.50857199999999913587, -1.02974399999999999267, -0.01745299999999999976, -0.26179900000000000393,},
                {0.66079900000000002525, -0.58179099999999994708, 9.51455699999999993111, -1.01228999999999991211, 0.01745299999999999976, -0.26179900000000000393,},
                {0.69072699999999997988, -0.52432999999999996277, 9.44273100000000020771, -0.99483699999999997132, 0.00000000000000000000, -0.26179900000000000393,},
                {0.68833200000000005492, -0.49799300000000001898, 9.60194500000000061846, -0.95993099999999997873, 0.00000000000000000000, -0.27925200000000000022,},
                {0.66439000000000003610, -0.53989200000000003854, 9.60434000000000054342, -0.95993099999999997873, 0.03490599999999999953, -0.26179900000000000393,},
                {0.68354400000000004045, -0.55066599999999998882, 9.46308199999999999363, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.67636099999999999000, -0.53270899999999998808, 9.46068799999999932027, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.69072699999999997988, -0.57460800000000000765, 9.58877700000000032787, -0.94247700000000000919, 0.05235900000000000276, -0.27925200000000000022,},
                {0.75776399999999999313, -0.55904600000000004290, 9.51455699999999993111, -0.94247700000000000919, 0.03490599999999999953, -0.27925200000000000022,},
                {0.70868299999999995187, -0.44651800000000002600, 9.50378300000000031389, -0.94247700000000000919, 0.03490599999999999953, -0.27925200000000000022,},
                {0.67396699999999998276, -0.54827199999999998159, 9.60434000000000054342, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.70628899999999994463, -0.54108900000000004216, 9.50138899999999964052, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.72304800000000002402, -0.53390599999999999170, 9.41759200000000085140, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.62368900000000004891, -0.54827199999999998159, 9.53131600000000034356, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.64284300000000005326, -0.46926299999999998569, 9.49300900000000069667, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.69431799999999999073, -0.51235900000000000887, 9.57560900000000003729, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.73142799999999996707, -0.52432999999999996277, 9.60194500000000061846, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.70150100000000004119, -0.54348300000000004939, 9.48582700000000045293, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.62727999999999994873, -0.53031499999999998085, 9.53371100000000026853, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.70269800000000004481, -0.56862199999999996081, 9.53251400000000082002, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69790900000000000158, -0.53031499999999998085, 9.45589900000000049829, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.70269800000000004481, -0.50278199999999995118, 9.60074799999999939359, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.67037599999999997191, -0.50876699999999996926, 9.59236899999999970134, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.71945700000000001317, -0.53749800000000003131, 9.52054299999999997794, -0.99483699999999997132, 0.03490599999999999953, -0.27925200000000000022,},
                {0.66798199999999996468, -0.49559900000000001175, 9.39484700000000039211, -0.97738400000000003054, 0.00000000000000000000, -0.27925200000000000022,},
                {0.69551499999999999435, -0.56383399999999994634, 9.56603199999999986858, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.72903399999999995984, -0.56622799999999995357, 9.55645600000000072782, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69910600000000000520, -0.51714700000000002333, 9.50378300000000031389, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.70269800000000004481, -0.49081099999999999728, 9.57201799999999991542, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.68354400000000004045, -0.54827199999999998159, 9.50258600000000086538, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.68354400000000004045, -0.56981999999999999318, 9.49899500000000074351, -0.99483699999999997132, 0.01745299999999999976, -0.27925200000000000022,},
                {0.68593800000000004768, -0.53390599999999999170, 9.54089300000000051227, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.72185100000000002041, -0.59974700000000003008, 9.60434000000000054342, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67755900000000002237, -0.46088299999999998713, 9.45589900000000049829, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.72185100000000002041, -0.57580500000000001126, 9.57082100000000046691, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.63685700000000000642, -0.56144000000000005013, 9.44632200000000032958, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.65361700000000000355, -0.51595000000000001972, 9.52054299999999997794, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.69671199999999999797, -0.58059300000000002573, 9.50617699999999921090, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.71706300000000000594, -0.51595000000000001972, 9.49181199999999947181, -0.97738400000000003054, 0.03490599999999999953, -0.27925200000000000022,},
                {0.67396699999999998276, -0.51355600000000001248, 9.49420600000000014518, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69551499999999999435, -0.51235900000000000887, 9.53849899999999983891, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.73741400000000001391, -0.54827199999999998159, 9.56363799999999919521, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.61291499999999998760, -0.52073800000000003418, 9.43794300000000063733, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69431799999999999073, -0.58538199999999995793, 9.53131600000000034356, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.72424599999999994537, -0.66199600000000002886, 9.56962399999999924205, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.68713500000000005130, -0.50996399999999997288, 9.54208999999999996078, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69431799999999999073, -0.52552699999999996638, 9.54208999999999996078, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.70269800000000004481, -0.54348300000000004939, 9.51216299999999925774, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.73262499999999997069, -0.56263700000000005375, 9.44392799999999965621, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.60094400000000003370, -0.53510400000000002407, 9.50019200000000019202, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.71347199999999999509, -0.59376200000000001200, 9.55406100000000080286, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.73980800000000002115, -0.48362800000000000233, 9.52173999999999942645, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.71347199999999999509, -0.55904600000000004290, 9.59835400000000049658, -0.97738400000000003054, 0.03490599999999999953, -0.26179900000000000393,},
                {0.70868299999999995187, -0.53270899999999998808, 9.46786999999999956401, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.67995300000000002960, -0.54108900000000004216, 9.44392799999999965621, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.70509200000000005204, -0.51834400000000002695, 9.46786999999999956401, -0.97738400000000003054, 0.03490599999999999953, -0.26179900000000000393,},
                {0.69431799999999999073, -0.56862199999999996081, 9.54448499999999988574, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.68833200000000005492, -0.49559900000000001175, 9.50976900000000036073, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67755900000000002237, -0.51355600000000001248, 9.52892199999999967019, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.79846600000000000907, -0.54587699999999994560, 9.54687900000000055911, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.69431799999999999073, -0.52552699999999996638, 9.41878900000000029991, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.68354400000000004045, -0.56503099999999994996, 9.55166700000000012949, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67276999999999997915, -0.55305999999999999606, 9.53610499999999916554, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.71826000000000000956, -0.47285399999999999654, 9.38646699999999967190, -0.95993099999999997873, 0.01745299999999999976, -0.26179900000000000393,},
                {0.74938499999999996781, -0.48602200000000000957, 9.60194500000000061846, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67276999999999997915, -0.50876699999999996926, 9.63187300000000057310, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.68234700000000003683, -0.57221400000000000041, 9.45589900000000049829, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.66079900000000002525, -0.50876699999999996926, 9.47744699999999973272, -0.97738400000000003054, 0.00000000000000000000, -0.27925200000000000022,},
                {0.69790900000000000158, -0.58777599999999996516, 9.55525800000000025136, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.74579300000000003923, -0.53031499999999998085, 9.49779799999999951865, -0.97738400000000003054, 0.03490599999999999953, -0.26179900000000000393,},
                {0.68593800000000004768, -0.49919099999999999584, 9.52293700000000065131, -0.95993099999999997873, 0.03490599999999999953, -0.26179900000000000393,},
                {0.69910600000000000520, -0.53390599999999999170, 9.48941800000000057480, -0.97738400000000003054, 0.01745299999999999976, -0.27925200000000000022,},
                {0.67157299999999997553, -0.55425699999999999967, 9.45470199999999927343, -0.97738400000000003054, 0.01745299999999999976, -0.26179900000000000393,},
                {0.69910600000000000520, -0.56622799999999995357, 9.46547600000000066700, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
                {0.72903399999999995984, -0.54348300000000004939, 9.50378300000000031389, -0.95993099999999997873, 0.03490599999999999953, -0.27925200000000000022,},
                {0.72544299999999994899, -0.49679600000000001536, 9.50138899999999964052, -0.95993099999999997873, 0.01745299999999999976, -0.27925200000000000022,},
        };


        RealMatrix R = new Array2DRowRealMatrix(a);
        R = R.transpose();
        double[][] data = R.getData();
        SensorCalibration SC = new SensorCalibration();
        SC.getRotationMatrix(data);

        //double[] feature = null;
        System.out.println(a);
//        a.add(1);
//        a.add(2);
//        a.add(3);
//        a.add(4);
//        for (int z1= 0; z1<a.size();z1++){
//            System.out.println(a.get(z1));
//            System.out.println(z1);
//        }
//        System.out.println(a.size());
//        System.out.println(getStandardDiviation(a));
//        System.out.println(getStandardDiviation(a));


//        Scanner sc=new Scanner(System.in);
//        System.out.println("输入未知数的个数");
//        int a=sc.nextInt();
//        double [][]jz = new double[a][a+1];
//        for(int m=0;m<a;m++) {
//            for(int n=0;n<a+1;n++) {
//                if(n==a) {
//                    System.out.println("请输入常系数");
//                    jz[m][a]=sc.nextDouble();
//                    continue;
//                }
//                System.out.printf("请输入%d行第%d个元的系数\n",m+1,n+1);
//                jz[m][n]=sc.nextDouble();
//            }
//        }
//        int a = 3;
//        double [][] jz = {{-0.2682, 1.2033, 9.7559, 0.8330}, {-0.3208, -1.1473, 10.2218, -1.0740},{-0.4407, 1.0953, 9.8076, 0.8040}};
//
//
//        for(int i=0;i<a;i++) {
//            for(int m=i;m<a;m++) {
//                double jzmi=jz[m][i];
//                for(int n=i;n<a+1;n++) {
//                    jz[m][n]=jz[m][n]/jzmi;
//                }
//            }
//            for(int m=i+1;m<a;m++) {
//                for(int n=i;n<a+1;n++) {
//                    jz[m][n]=jz[m][n]-jz[i][n];
//                }
//            }
//        }
//        for(int i=a-1;i>0;i--) {
//            for(int m=i-1;m>=0;m--) {
//                jz[m][a]=jz[m][a]-jz[i][a]*jz[m][i];
//                jz[m][i]=0;
//            }
//        }
//        System.out.print("解向量为：[");
//        for(int m=0;m<a;m++) {
//            System.out.print("  "+jz[m][a]);
//        }
//        System.out.print("]");

//        byte [] shit = {0x06, 0x62, 0x18, 0x12, (byte)0xff, (byte)0xf1, 0x01, 0x00};
//
//        StateTables.UpdateUDS("077C", shit);
//        System.out.println(StateTables.SingleState.get("SteerAngle"));
//
//        byte [] shit1 = {0x06, 0x62, 0x18, 0x12, (byte)0x00, (byte)0x00, 0x01, 0x00};
//
//        StateTables.UpdateUDS("077C", shit1);
//        System.out.println(StateTables.SingleState.get("SteerAngle"));
//
//        byte [] shit2 = {0x06, 0x62, 0x18, 0x12, (byte)0x01, (byte)0x01, 0x01, 0x00};
//
//        StateTables.UpdateUDS("077C", shit2);
//        System.out.println(StateTables.SingleState.get("SteerAngle"));
//
//        for (int z1 = 0; z1 < Window.SteerAngle_List.size(); z1++){
//            System.out.println("SteerAngle"+Window.SteerAngle_List.get(z1));
//        }
//
//
//        byte [] shit3 = {0x06, 0x62, 0x12, (byte)0xB0, (byte)0xf3, (byte)0xf3, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit3);
//        System.out.println(StateTables.SingleState.get("Acceleration"));
//
//        byte [] shit4 = {0x06, 0x62,0x12, (byte)0xB0, (byte)0x03, (byte)0x03, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit4);
//        System.out.println(StateTables.SingleState.get("Acceleration"));
//
//        byte [] shit5 = {0x06, 0x62, 0x12, (byte)0xB0, (byte)0x03, (byte)0x07, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit5);
//        System.out.println(StateTables.SingleState.get("Acceleration"));
//
//        for (int z1 = 0; z1 < Window.Acceleration_List.size(); z1++){
//            System.out.println("Acceleration"+Window.Acceleration_List.get(z1));
//        }
//
//        byte [] shit6 = {0x04, 0x62, 0x15, (byte)0xD1, (byte)0xf2, (byte)0xf2, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit6);
//        System.out.println(StateTables.SingleState.get("LateralAcceleration"));
//
//        byte [] shit7 = {0x04, 0x62, 0x15, (byte)0xD1, (byte)0x02, (byte)0x02, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit7);
//        System.out.println(StateTables.SingleState.get("LateralAcceleration"));
//
//        byte [] shit8 = {0x04, 0x62, 0x15, (byte)0xD1, (byte)0x02, (byte)0x06, 0x01, 0x00};
//
//        StateTables.UpdateUDS("07E8", shit8);
//        System.out.println(StateTables.SingleState.get("LateralAcceleration"));
//
//        for (int z1 = 0; z1 < Window.LateralAcc_List.size(); z1++){
//            System.out.println("LateralAcceleration"+Window.LateralAcc_List.get(z1));
//        }


//        for (int zz1 = 0;zz1<2;zz1++){
//            for(int zz2 = 0; zz2 <6;zz2++ ){
//                System.out.println(z1.getWinData()[zz1][zz2]);
//            }
//        }


        //Action testA = new Action();
        //testA.ActionName = "Window";
        //testA.Value = 1;

        //Map testCondition = new HashMap();
        //testCondition.put("Vehicle_Speed","110");
        //testCondition.put("Orientation","201");

        //Map testCondition1 = new HashMap();
        //testCondition1.put("Gradient","110");

        //Rule r0;
        //r0 = testCT.CreatRule(ActionValue.REJECT,testA,testCondition);
        //testCT.AddRuleTable(r0);

        //Rule r1 = testCT.CreatRule(ActionValue.REJECT,testA,testCondition1);
        //testCT.AddRuleTable(r1);

//        StateTables SST = new StateTables();
//        SST.InitStateTables();
//        Window.InitStateRules();
//        List res = Window.CheckAnomaly();
//        if(res==null){
//            System.out.println("Normal");
//        }else{
//            System.out.println(res);
//        }
//        for(int i=0; i<res.size();i++){
//            int a = (int)res.get(i);
//            System.out.println(ActionValue.Warning[a]);
//        }
//
        //int result0;
        //result0=testCT.MakeDecision(testA);
        //String result1;

        //System.out.println(result0);

        //byte[] validData = new byte[1];
        //validData[0]= (byte)0xff;
        //String content = Utils.getByteStringHex(validData);
        //System.out.println(content);

        //byte a = (byte)0xE8;
        //String res = Utils.getSingleByteStringHex(a);
        //byte b = (byte)0x07;
        //String res2 = Utils.getSingleByteStringHex(b);
        //String re = res2 + res;
        //System.out.println(re);
        /*
        byte[] data = new byte[]{0x04,0x62,(byte)0xF4,(byte)0x0D,(byte)0x22,0x55,0x55,0x55};
        StateTables.UpdateUDS("07E8",data);
        double re = StateTables.SingleState.get("Vehicle_Speed");
        System.out.println(re);
        byte[] data2 = new byte[]{0x05,0x2F,(byte)0x09,(byte)0x66,(byte)0x03,0x01,0x00,0x00};
        Action test = ActionTables.GetAction("070E",data2);
        int result2;
        result2 = testCT.MakeDecision(test);
        System.out.println(result2);
        int temp;
        temp = CanTables.RuleTables.size();
        byte re0 = (byte)result2;
        System.out.println(re0);

        byte a = 0x0B;
        byte b = (byte)0xB8;
        int c = (a & 0xFF)<<8 |(b & 0xFF);
        System.out.println(c);
        */
/*
        RingBuffer<Integer> test = new RingBuffer<>(5);
        for (int i = 0; i < 7; i++) {
            test.add(i);
        }
        for (int i =0;i<6;i++){
            System.out.println(test.get());
        }

        Object a[];
        a = test.getQueue();
        System.out.println(a.length);
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }*/
        String test = "Time:5000 Number:2 [Rule:RMP,203000] [Rule:Speed,200]";
        ivRule t;
        t = parseData.parseRule(test);
        System.out.println(t.numbers);
        System.out.println(t.time);
        System.out.println(t.Condition);


    }


}